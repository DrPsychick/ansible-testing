---
# to setup a new VM
- name: Ensure target directory exists
  ansible.builtin.file:
    path: "{{ work_dir }}/scripts-{{ instance.name }}"
    state: directory
    mode: 0755
  when: instance.disk_image is not defined

- name: Copy PowerShell upgrade script
  ansible.builtin.copy:
    remote_src: true
    src: "{{ work_dir }}/scripts/upgrade-powershell.ps1"
    dest: "{{ work_dir }}/scripts-{{ instance.name }}/upgrade-powershell.ps1"
    mode: 0644
  register: upgrade_powershell
  when: instance.disk_image is not defined

- name: Copy WinRM hotfix script
  ansible.builtin.copy:
    remote_src: true
    src: "{{ work_dir }}/scripts/winrm-hotfix.ps1"
    dest: "{{ work_dir }}/scripts-{{ instance.name }}/winrm-hotfix.ps1"
    mode: 0644
  register: winrm_hotfix
  when: instance.disk_image is not defined

- name: Template WinRM setup script
  ansible.builtin.template:
    src: setup-winrm.ps1
    dest: "{{ work_dir }}/scripts-{{ instance.name }}/setup-winrm.ps1"
    mode: 0644
  register: setup_winrm
  when: instance.disk_image is not defined

- name: Template AutoUnattend.xml
  ansible.builtin.template:
    src: AutoUnattend.xml
    dest: "{{ work_dir }}/scripts-{{ instance.name }}/AutoUnattend.xml"
    mode: 0644
  register: autounattend
  when: instance.disk_image is not defined

- name: Template autorun.bat
  ansible.builtin.template:
    src: autorun.bat
    dest: "{{ work_dir }}/scripts-{{ instance.name }}/autorun.bat"
    mode: 0644
  register: autorun
  when: instance.disk_image is not defined

- name: Generate scripts.iso
  ansible.builtin.shell: |
    mkisofs -o {{ libvirt_iso_dir }}/scripts-{{ instance.name }}.iso -J -r {{ work_dir }}/scripts-{{ instance.name }}
  when: instance.disk_image is not defined and (
      upgrade_powershell is changed or winrm_hotfix is changed or setup_winrm is changed 
      or autounattend is changed or autorun is changed
    )
  become: true
  become_user: root

- name: Set instance_uuid variable
  ansible.builtin.set_fact:
    instance_uuid: "{{ instance.uuid | default(99999999 | random | to_uuid) }}"

- name: Template instance
  ansible.builtin.template:
    src: instance.xml
    dest: "{{ work_dir }}/instance-{{ instance.name }}.xml"
    mode: 0644
  register: instance_template
  changed_when: instance_template is changed and instance.uuid is defined

- name: Create disk
  ansible.builtin.shell: >
    if [ ! -r "{{ libvirt_image_dir }}/{{ instance.name }}.qcow2" ]; then
      virsh vol-create-as images {{ instance.name }}.qcow2 {{ instance.disk_size }} --format qcow2 > /dev/null;
      chown libvirt-qemu:kvm {{ libvirt_image_dir }}/{{ instance.name }}.qcow2;
      echo "created"
    fi
  register: create_disk
  become: true
  become_user: root
  changed_when: create_disk.stdout == "created"
  when: instance.disk_size is defined and instance.disk_image is not defined

- name: Download disk image
  ansible.builtin.get_url:
    url: "{{ instance.disk_image_url }}"
    dest: "{{ libvirt_iso_dir }}/{{ instance.disk_image }}"
    mode: 0444
  become: true
  become_user: root
  when: instance.disk_image_url is defined and instance.disk_image is defined

- name: Unarchive disk image
  ansible.builtin.unarchive:
    src: "{{ libvirt_iso_dir }}/{{ instance.disk_image }}"
    dest: "{{ libvirt_image_dir }}/"
    mode: 0644
    remote_src: true
  become: true
  become_user: root
  when: instance.disk_image is defined

- name: Define virtual machine
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'instance.xml') }}"
  become: true
  become_user: root

- name: Create virtual machine
  community.libvirt.virt:
    command: create
    name: "{{ instance.name }}"
    xml: "{{ lookup('template', 'instance.xml') }}"
    state: running
    autostart: true
  register: create_vm
  become: true
  become_user: root

- name: Get virtual machine info
  community.libvirt.virt:
    command: info
    name: "{{ instance.name }}"
  register: virt_info_cmd
  become: true
  become_user: root
  retries: 10
  delay: 10
  until: not virt_info_cmd.failed and virt_info_cmd[instance.name].state == "running"

- name: Add instance {{ instance.name }} to inventory
  # as {{ .IPAddress }}
  ansible.builtin.set_fact:
    virtual_machine_inventory: >
      {{ virtual_machine_inventory | default({}) | combine( { instance.name:
        { 'name': instance.name, 'os': instance.os, 'password': instance.password }
      } ) }}
